{"version":3,"file":"ExponentAV.web.js","sourceRoot":"","sources":["../src/ExponentAV.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { PlaybackStatusToSet, PlaybackStatus, PlaybackNativeSource } from './AV';\n\nfunction getStatusFromMedia(media?: HTMLMediaElement): PlaybackStatus {\n  if (!media) {\n    return {\n      isLoaded: false,\n      error: undefined,\n    };\n  }\n\n  const isPlaying = !!(\n    media.currentTime > 0 &&\n    !media.paused &&\n    !media.ended &&\n    media.readyState > 2\n  );\n\n  const status: PlaybackStatus = {\n    isLoaded: true,\n    uri: media.src,\n    progressUpdateIntervalMillis: 100, //TODO: Bacon: Add interval between calls\n    durationMillis: media.duration * 1000,\n    positionMillis: media.currentTime * 1000,\n    // playableDurationMillis: media.buffered * 1000,\n    // seekMillisToleranceBefore?: number\n    // seekMillisToleranceAfter?: number\n    shouldPlay: media.autoplay,\n    isPlaying,\n    isBuffering: false, //media.waiting,\n    rate: media.playbackRate,\n    // TODO: Bacon: This seems too complicated right now: https://webaudio.github.io/web-audio-api/#dom-biquadfilternode-frequency\n    shouldCorrectPitch: false,\n    volume: media.volume,\n    isMuted: media.muted,\n    isLooping: media.loop,\n    didJustFinish: media.ended,\n  };\n\n  return status;\n}\n\nexport default {\n  get name(): string {\n    return 'ExponentAV';\n  },\n  async getStatusForVideo(element: HTMLMediaElement): Promise<PlaybackStatus> {\n    const outputStatus = getStatusFromMedia(element);\n    return outputStatus;\n  },\n  async loadForVideo(\n    element: HTMLMediaElement,\n    nativeSource: PlaybackNativeSource,\n    fullInitialStatus: PlaybackStatusToSet\n  ): Promise<PlaybackStatus> {\n    return await this.getStatusForVideo(element);\n  },\n  async unloadForVideo(element: HTMLMediaElement): Promise<PlaybackStatus> {\n    return await this.getStatusForVideo(element);\n  },\n  async setStatusForVideo(\n    element: HTMLMediaElement,\n    status: PlaybackStatusToSet\n  ): Promise<PlaybackStatus> {\n    if (status.positionMillis !== undefined) {\n      element.currentTime = status.positionMillis / 1000;\n    }\n    // if (status.progressUpdateIntervalMillis !== undefined) {\n    //   element.progressUpdateIntervalMillis = status.progressUpdateIntervalMillis;\n    // }\n    // if (status.seekMillisToleranceBefore !== undefined) {\n    //   element.seekMillisToleranceBefore = status.seekMillisToleranceBefore;\n    // }\n    // if (status.seekMillisToleranceAfter !== undefined) {\n    //   element.seekMillisToleranceAfter = status.seekMillisToleranceAfter;\n    // }\n    // if (status.shouldCorrectPitch !== undefined) {\n    //   element.shouldCorrectPitch = status.shouldCorrectPitch;\n    // }\n    if (status.shouldPlay !== undefined) {\n      if (status.shouldPlay) {\n        element.play();\n      } else {\n        element.pause();\n      }\n    }\n    if (status.rate !== undefined) {\n      element.playbackRate = status.rate;\n    }\n    if (status.volume !== undefined) {\n      element.volume = status.volume;\n    }\n    if (status.isMuted !== undefined) {\n      element.muted = status.isMuted;\n    }\n    if (status.isLooping !== undefined) {\n      element.loop = status.isLooping;\n    }\n    return await this.getStatusForVideo(element);\n  },\n  async replayVideo(\n    element: HTMLMediaElement,\n    status: PlaybackStatusToSet\n  ): Promise<PlaybackStatus> {\n    return await this.setStatusForVideo(element, status);\n  },\n  /* Audio */\n  async setAudioMode() {},\n  async setAudioIsEnabled() {},\n\n  async getStatusForSound() {},\n  async setErrorCallbackForSound() {},\n  async loadForSound() {},\n  async unloadForSound() {},\n  async setStatusForSound() {},\n  async replaySound() {},\n\n  /* Recording */\n  //   async setUnloadedCallbackForAndroidRecording() {},\n  async getAudioRecordingStatus() {},\n  async prepareAudioRecorder() {},\n  async startAudioRecording() {},\n  async pauseAudioRecording() {},\n  async stopAudioRecording() {},\n  async unloadAudioRecorder() {},\n};\n"]}